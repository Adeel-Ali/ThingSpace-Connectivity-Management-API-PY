# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.controllers.devices_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 10/05/2016
"""

from .base_controller import *

from ..models.request_response import RequestResponse
from ..models.device_usage_list_response import DeviceUsageListResponse
from ..models.device_provisioning_history_list_response import DeviceProvisioningHistoryListResponse
from ..models.connection_history_response import ConnectionHistoryResponse
from ..models.connection_event import ConnectionEvent
from ..models.device_list_response import DeviceListResponse
from ..models.add_devices_response_message import AddDevicesResponseMessage
from ..exceptions.rest_error_response_exception import RestErrorResponseException


class DevicesController(BaseController):

    """A Controller to access Endpoints in the thingspaceconnectivitymanagementapilib API."""

    def __init__(self, http_client = None, http_call_back = None):
        """Constructor which allows a different HTTP client for this controller."""
        BaseController.__init__(self, http_client, http_call_back)

    def change_device_id_using_put(self,
                                   service_type,
                                   request,
                                   vz_m_2_m_token):
        """Does a PUT request to /devices/{serviceType}/actions/deviceId.

        Changes the identifier of a 3G or 4G device to match hardware changes
        made for a line of service.

        Args:
            service_type (string): Identifier type
            request (ChangeDeviceIdRequest): Device Usage Query
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RequestResponse: Response from the API. A unique string that
                associates the request with the results that are sent via a
                callback service.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/{serviceType}/actions/deviceId'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'serviceType': service_type
        })
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RequestResponse.from_dictionary)



    def create_aggregate_using_post(self,
                                    request,
                                    vz_m_2_m_token):
        """Does a POST request to /devices/usage/actions/list/aggregate.

        Returns the total amount of data sent and the total number of SMS
        messages sent or received by a set of devices in a specified
        timeframe.

        Args:
            request (DeviceAggregateUsageListRequest): Request
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RequestResponse: Response from the API. A unique string that
                associates the request with the results that are sent via a
                callback service.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/usage/actions/list/aggregate'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RequestResponse.from_dictionary)



    def create_usage_list_using_post(self,
                                     request,
                                     vz_m_2_m_token):
        """Does a POST request to /devices/usage/actions/list.

        Returns the network data usage history of a device during a specified
        time period.

        Args:
            request (DeviceUsageListRequest): Device Usage Query
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            list of DeviceUsageListResponse: Response from the API. List of
                device usage events, sorted by the timestamp, oldest first.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/usage/actions/list'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, DeviceUsageListResponse.from_dictionary)



    def create_prl_list_using_post(self,
                                   request,
                                   vz_m_2_m_token):
        """Does a POST request to /devices/prl/actions/list.

        Requests the current PRL version for devices, which can help determine
        which devices need a PRL update.

        Args:
            request (DevicePrlListRequest): Device PRL Query
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RequestResponse: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/prl/actions/list'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RequestResponse.from_dictionary)



    def create_provisioning_history_list_using_post(self,
                                                    request,
                                                    vz_m_2_m_token):
        """Does a POST request to /devices/history/actions/list.

        Returns the provisioning history of a device during a specified time
        period.

        Args:
            request (DeviceProvisioningHistoryListRequest): Device ProHistory
                Query
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            list of DeviceProvisioningHistoryListResponse: Response from the
                API. List of Device Provision History events, sorted by the
                timestamp, oldest first.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/history/actions/list'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, DeviceProvisioningHistoryListResponse.from_dictionary)



    def change_cost_center_using_put(self,
                                     request,
                                     vz_m_2_m_token):
        """Does a PUT request to /devices/costCenter.

        Changes or removes the costCenterCode value for one or more devices.

        Args:
            request (DeviceCostCenterRequest): Request
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RequestResponse: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/costCenter'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RequestResponse.from_dictionary)



    def create_connection_list_history_using_post(self,
                                                  request,
                                                  vz_m_2_m_token):
        """Does a POST request to /devices/connections/actions/listHistory.

        Returns a list of network connection events for a device during a
        specified time period.

        Args:
            request (DeviceConnectionListRequest): Device Connection Query
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            list of ConnectionHistoryResponse: Response from the API. List of
                device connection events, sorted by the occurredAt timestamp,
                oldest first.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/connections/actions/listHistory'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, ConnectionHistoryResponse.from_dictionary)



    def create_connection_list_using_post(self,
                                          request,
                                          vz_m_2_m_token):
        """Does a POST request to /devices/connections/actions/list.

        Returns a list of network connection events for a device during a
        specified time period.

        Args:
            request (DeviceConnectionListRequest): Device Connection Query
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            list of ConnectionEvent: Response from the API. List of device
                connection events, sorted by the OccurredAt timestamp, oldest
                first.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/connections/actions/list'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, ConnectionEvent.from_dictionary)



    def create_restore_using_post(self,
                                  request,
                                  vz_m_2_m_token):
        """Does a POST request to /devices/actions/restore.

        Restore service to one or more suspended devices. 

        Args:
            request (CarrierActionsRequest): Update state
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RequestResponse: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/actions/restore'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RequestResponse.from_dictionary)



    def create_suspend_using_post(self,
                                  request,
                                  vz_m_2_m_token):
        """Does a POST request to /devices/actions/suspend.

        Suspends service for one or more devices. 

        Args:
            request (CarrierActionsRequest): Update state
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RequestResponse: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/actions/suspend'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RequestResponse.from_dictionary)



    def update_service_plan_using_put(self,
                                      request,
                                      vz_m_2_m_token):
        """Does a PUT request to /devices/actions/plan.

        Sets a new service plan for one or more devices.

        Args:
            request (ServicePlanUpdateRequest): Request
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RequestResponse: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/actions/plan'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RequestResponse.from_dictionary)



    def create_list_using_post(self,
                               request,
                               vz_m_2_m_token):
        """Does a POST request to /devices/actions/list.

        Returns information about a specified device or a list of devices in
        an account.

        Args:
            request (DeviceListRequest): Device Query
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            DeviceListResponse: Response from the API. List of devices that
                match the request parameters, ordered by device creation date,
                oldest first.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/actions/list'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, DeviceListResponse.from_dictionary)



    def create_deactive_using_post(self,
                                   request,
                                   vz_m_2_m_token):
        """Does a POST request to /devices/actions/deactivate.

        Deactivates service for one or more devices.

        Args:
            request (CarrierDeactivateRequest): Deactivate state
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RequestResponse: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/actions/deactivate'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RequestResponse.from_dictionary)



    def update_custom_fields_using_put(self,
                                       request,
                                       vz_m_2_m_token):
        """Does a PUT request to /devices/actions/customFields.

        Updates one or more custom field values for devices.

        Args:
            request (CustomFieldsUpdateRequest): Request
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RequestResponse: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/actions/customFields'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RequestResponse.from_dictionary)



    def add_using_post(self,
                       request,
                       vz_m_2_m_token):
        """Does a POST request to /devices/actions/add.

        Adds up to 200 new devices, without provisioning lines of service for
        them.

        Args:
            request (AddDevicesRequest): Devices to Add
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            list of AddDevicesResponseMessage: Response from the API. For each
                device in the request, contains device identifiers and a
                success or failure response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/actions/add'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, AddDevicesResponseMessage.from_dictionary)



    def create_active_using_post(self,
                                 request,
                                 vz_m_2_m_token):
        """Does a POST request to /devices/actions/activate.

        Activates service for one or more devices.

        Args:
            request (CarrierActivateRequest): Activate state
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RequestResponse: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/devices/actions/activate'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RequestResponse.from_dictionary)


