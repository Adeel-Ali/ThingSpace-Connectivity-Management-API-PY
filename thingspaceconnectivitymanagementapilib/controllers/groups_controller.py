# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.controllers.groups_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 10/05/2016
"""

from .base_controller import *

from ..models.rest_success_response import RestSuccessResponse
from ..models.group_list_response import GroupListResponse
from ..models.group_response import GroupResponse
from ..exceptions.rest_error_response_exception import RestErrorResponseException


class GroupsController(BaseController):

    """A Controller to access Endpoints in the thingspaceconnectivitymanagementapilib API."""

    def __init__(self, http_client = None, http_call_back = None):
        """Constructor which allows a different HTTP client for this controller."""
        BaseController.__init__(self, http_client, http_call_back)

    def delete_device_group_using_delete(self,
                                         vz_m_2_m_token,
                                         aname,
                                         gname):
        """Does a DELETE request to /groups/{aname}/name/{gname}.

        Deletes a device group. Devices in the group are moved to the default
        device group and are not deleted from the account.

        Args:
            vz_m_2_m_token (string): M2M-MC Session Token
            aname (string): Account name
            gname (string): Group name

        Returns:
            RestSuccessResponse: Response from the API. Request Success
                Message

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/groups/{aname}/name/{gname}'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'aname': aname,
            'gname': gname
        })
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.delete(_query_url, headers=_headers)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RestSuccessResponse.from_dictionary)



    def update_device_group_using_put(self,
                                      request,
                                      aname,
                                      gname,
                                      vz_m_2_m_token):
        """Does a PUT request to /groups/{aname}/name/{gname}.

        Make changes to a device group, including changing the name and
        description, and adding or removing devices.

        Args:
            request (GroupUpdateRequest): Request
            aname (string): Account name
            gname (string): Group name
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RestSuccessResponse: Response from the API. Request Success
                Message

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/groups/{aname}/name/{gname}'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'aname': aname,
            'gname': gname
        })
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RestSuccessResponse.from_dictionary)



    def get_device_group_info_using_get(self,
                                        aname,
                                        gname,
                                        vz_m_2_m_token,
                                        next = None):
        """Does a GET request to /groups/{aname}/name/{gname}.

        Returns the name, description, and list of devices in a device group.

        Args:
            aname (string): Account name
            gname (string): Group name
            vz_m_2_m_token (string): M2M-MC Session Token
            next (long|int, optional): Continue the previous query from the
                pageUrl pagetoken

        Returns:
            GroupListResponse: Response from the API. Successful response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/groups/{aname}/name/{gname}'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'aname': aname,
            'gname': gname
        })

        # Process optional query parameters
        _query_parameters = {
            'next': next
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, GroupListResponse.from_dictionary)



    def get_list_using_get(self,
                           vz_m_2_m_token,
                           aname):
        """Does a GET request to /groups/{aname}.

        Returns a list of device groups in an account

        Args:
            vz_m_2_m_token (string): M2M-MC Session Token
            aname (string): Account name

        Returns:
            list of GroupResponse: Response from the API. The list of device
                groups in the account.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/groups/{aname}'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'aname': aname
        })
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, GroupResponse.from_dictionary)



    def create_device_group_using_post(self,
                                       request,
                                       vz_m_2_m_token):
        """Does a POST request to /groups.

        Creates a new device group and optionally adds a set of devices to
        that group.

        Args:
            request (CreateDevGroupRequest): Request
            vz_m_2_m_token (string): M2M-MC Session Token

        Returns:
            RestSuccessResponse: Response from the API. Request Success
                Message

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/groups'
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'api_key': Configuration.api_key,
            'VZ-M2M-Token': vz_m_2_m_token,
            'api_key': Configuration.api_key
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 400:
            raise RestErrorResponseException('400 - Error Response', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, RestSuccessResponse.from_dictionary)


