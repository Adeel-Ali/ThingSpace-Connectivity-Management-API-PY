# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.connection_event
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .kv_pair import KvPair
from .base_model import BaseModel

class ConnectionEvent(BaseModel):

    """Implementation of the 'ConnectionEvent' model.

    TODO: type model description here.

    Attributes:
        connection_event_attributes (list of KvPair): TODO: type description
            here.
        extended_attributes (list of KvPair): TODO: type description here.
        occurred_at (string): TODO: type description here.

    """

    def __init__(self, 
                 connection_event_attributes = None,
                 extended_attributes = None,
                 occurred_at = None):
        """Constructor for the ConnectionEvent class"""
        
        # Initialize members of the class
        self.connection_event_attributes = connection_event_attributes
        self.extended_attributes = extended_attributes
        self.occurred_at = occurred_at

        # Create a mapping from Model property names to API property names
        self.names = {
            "connection_event_attributes" : "connectionEventAttributes",
            "extended_attributes" : "extendedAttributes",
            "occurred_at" : "occurredAt",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            connection_event_attributes = None
            if dictionary.get("connectionEventAttributes") != None:
                connection_event_attributes = list()
                for structure in dictionary.get("connectionEventAttributes"):
                    connection_event_attributes.append(KvPair.from_dictionary(structure))
            extended_attributes = None
            if dictionary.get("extendedAttributes") != None:
                extended_attributes = list()
                for structure in dictionary.get("extendedAttributes"):
                    extended_attributes.append(KvPair.from_dictionary(structure))
            occurred_at = dictionary.get("occurredAt")
            # Return an object of this model
            return cls(connection_event_attributes,
                       extended_attributes,
                       occurred_at)
