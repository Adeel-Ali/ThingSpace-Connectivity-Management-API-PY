# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.carrier_activate_request
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .kv_pair import KvPair
from .device_list import DeviceList
from .place_of_use import PlaceOfUse
from .base_model import BaseModel

class CarrierActivateRequest(BaseModel):

    """Implementation of the 'CarrierActivateRequest' model.

    TODO: type model description here.

    Attributes:
        account_name (string): TODO: type description here.
        carrier_ip_pool_name (string): TODO: type description here.
        carrier_name (string): TODO: type description here.
        cost_center_code (string): TODO: type description here.
        custom_fields (list of KvPair): TODO: type description here.
        devices (list of DeviceList): TODO: type description here.
        group_name (string): TODO: type description here.
        lead_id (string): TODO: type description here.
        mdn_zip_code (string): TODO: type description here.
        primary_place_of_use (PlaceOfUse): TODO: type description here.
        public_ip_restriction (string): TODO: type description here.
        service_plan (string): TODO: type description here.
        sku_number (string): TODO: type description here.

    """

    def __init__(self, 
                 account_name = None,
                 carrier_ip_pool_name = None,
                 carrier_name = None,
                 cost_center_code = None,
                 custom_fields = None,
                 devices = None,
                 group_name = None,
                 lead_id = None,
                 mdn_zip_code = None,
                 primary_place_of_use = None,
                 public_ip_restriction = None,
                 service_plan = None,
                 sku_number = None):
        """Constructor for the CarrierActivateRequest class"""
        
        # Initialize members of the class
        self.account_name = account_name
        self.carrier_ip_pool_name = carrier_ip_pool_name
        self.carrier_name = carrier_name
        self.cost_center_code = cost_center_code
        self.custom_fields = custom_fields
        self.devices = devices
        self.group_name = group_name
        self.lead_id = lead_id
        self.mdn_zip_code = mdn_zip_code
        self.primary_place_of_use = primary_place_of_use
        self.public_ip_restriction = public_ip_restriction
        self.service_plan = service_plan
        self.sku_number = sku_number

        # Create a mapping from Model property names to API property names
        self.names = {
            "account_name" : "accountName",
            "carrier_ip_pool_name" : "carrierIpPoolName",
            "carrier_name" : "carrierName",
            "cost_center_code" : "costCenterCode",
            "custom_fields" : "customFields",
            "devices" : "devices",
            "group_name" : "groupName",
            "lead_id" : "leadId",
            "mdn_zip_code" : "mdnZipCode",
            "primary_place_of_use" : "primaryPlaceOfUse",
            "public_ip_restriction" : "publicIpRestriction",
            "service_plan" : "servicePlan",
            "sku_number" : "skuNumber",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            account_name = dictionary.get("accountName")
            carrier_ip_pool_name = dictionary.get("carrierIpPoolName")
            carrier_name = dictionary.get("carrierName")
            cost_center_code = dictionary.get("costCenterCode")
            custom_fields = None
            if dictionary.get("customFields") != None:
                custom_fields = list()
                for structure in dictionary.get("customFields"):
                    custom_fields.append(KvPair.from_dictionary(structure))
            devices = None
            if dictionary.get("devices") != None:
                devices = list()
                for structure in dictionary.get("devices"):
                    devices.append(DeviceList.from_dictionary(structure))
            group_name = dictionary.get("groupName")
            lead_id = dictionary.get("leadId")
            mdn_zip_code = dictionary.get("mdnZipCode")
            primary_place_of_use = PlaceOfUse.from_dictionary(dictionary.get("primaryPlaceOfUse")) if dictionary.get("primaryPlaceOfUse") else None
            public_ip_restriction = dictionary.get("publicIpRestriction")
            service_plan = dictionary.get("servicePlan")
            sku_number = dictionary.get("skuNumber")
            # Return an object of this model
            return cls(account_name,
                       carrier_ip_pool_name,
                       carrier_name,
                       cost_center_code,
                       custom_fields,
                       devices,
                       group_name,
                       lead_id,
                       mdn_zip_code,
                       primary_place_of_use,
                       public_ip_restriction,
                       service_plan,
                       sku_number)
