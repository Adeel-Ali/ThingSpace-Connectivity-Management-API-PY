# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.sms_send_request
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .kv_pair import KvPair
from .device_id import DeviceId
from .base_model import BaseModel

class SMSSendRequest(BaseModel):

    """Implementation of the 'SMSSendRequest' model.

    TODO: type model description here.

    Attributes:
        account_name (string): TODO: type description here.
        custom_fields (list of KvPair): TODO: type description here.
        data_encoding (string): TODO: type description here.
        device_ids (list of DeviceId): TODO: type description here.
        group_name (string): TODO: type description here.
        service_plan (string): TODO: type description here.
        sms_message (string): TODO: type description here.

    """

    def __init__(self, 
                 account_name = None,
                 custom_fields = None,
                 data_encoding = None,
                 device_ids = None,
                 group_name = None,
                 service_plan = None,
                 sms_message = None):
        """Constructor for the SMSSendRequest class"""
        
        # Initialize members of the class
        self.account_name = account_name
        self.custom_fields = custom_fields
        self.data_encoding = data_encoding
        self.device_ids = device_ids
        self.group_name = group_name
        self.service_plan = service_plan
        self.sms_message = sms_message

        # Create a mapping from Model property names to API property names
        self.names = {
            "account_name" : "accountName",
            "custom_fields" : "customFields",
            "data_encoding" : "dataEncoding",
            "device_ids" : "deviceIds",
            "group_name" : "groupName",
            "service_plan" : "servicePlan",
            "sms_message" : "smsMessage",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            account_name = dictionary.get("accountName")
            custom_fields = None
            if dictionary.get("customFields") != None:
                custom_fields = list()
                for structure in dictionary.get("customFields"):
                    custom_fields.append(KvPair.from_dictionary(structure))
            data_encoding = dictionary.get("dataEncoding")
            device_ids = None
            if dictionary.get("deviceIds") != None:
                device_ids = list()
                for structure in dictionary.get("deviceIds"):
                    device_ids.append(DeviceId.from_dictionary(structure))
            group_name = dictionary.get("groupName")
            service_plan = dictionary.get("servicePlan")
            sms_message = dictionary.get("smsMessage")
            # Return an object of this model
            return cls(account_name,
                       custom_fields,
                       data_encoding,
                       device_ids,
                       group_name,
                       service_plan,
                       sms_message)
