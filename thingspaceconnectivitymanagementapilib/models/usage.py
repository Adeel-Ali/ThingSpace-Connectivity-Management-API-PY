# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.usage
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .kv_pair import KvPair
from .base_model import BaseModel

class Usage(BaseModel):

    """Implementation of the 'Usage' model.

    TODO: type model description here.

    Attributes:
        bytes_used (long|int): TODO: type description here.
        extended_attributes (list of KvPair): TODO: type description here.
        service_plan (string): TODO: type description here.
        sms_used (int): TODO: type description here.
        source (string): TODO: type description here.
        timestamp (string): TODO: type description here.

    """

    def __init__(self, 
                 bytes_used = None,
                 extended_attributes = None,
                 service_plan = None,
                 sms_used = None,
                 source = None,
                 timestamp = None):
        """Constructor for the Usage class"""
        
        # Initialize members of the class
        self.bytes_used = bytes_used
        self.extended_attributes = extended_attributes
        self.service_plan = service_plan
        self.sms_used = sms_used
        self.source = source
        self.timestamp = timestamp

        # Create a mapping from Model property names to API property names
        self.names = {
            "bytes_used" : "bytesUsed",
            "extended_attributes" : "extendedAttributes",
            "service_plan" : "servicePlan",
            "sms_used" : "smsUsed",
            "source" : "source",
            "timestamp" : "timestamp",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            bytes_used = dictionary.get("bytesUsed")
            extended_attributes = None
            if dictionary.get("extendedAttributes") != None:
                extended_attributes = list()
                for structure in dictionary.get("extendedAttributes"):
                    extended_attributes.append(KvPair.from_dictionary(structure))
            service_plan = dictionary.get("servicePlan")
            sms_used = dictionary.get("smsUsed")
            source = dictionary.get("source")
            timestamp = dictionary.get("timestamp")
            # Return an object of this model
            return cls(bytes_used,
                       extended_attributes,
                       service_plan,
                       sms_used,
                       source,
                       timestamp)
