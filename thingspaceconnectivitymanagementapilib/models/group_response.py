# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.group_response
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .kv_pair import KvPair
from .base_model import BaseModel

class GroupResponse(BaseModel):

    """Implementation of the 'GroupResponse' model.

    TODO: type model description here.

    Attributes:
        description (string): TODO: type description here.
        extended_attributes (list of KvPair): TODO: type description here.
        is_default_group (bool): TODO: type description here.
        name (string): TODO: type description here.

    """

    def __init__(self, 
                 description = None,
                 extended_attributes = None,
                 is_default_group = None,
                 name = None):
        """Constructor for the GroupResponse class"""
        
        # Initialize members of the class
        self.description = description
        self.extended_attributes = extended_attributes
        self.is_default_group = is_default_group
        self.name = name

        # Create a mapping from Model property names to API property names
        self.names = {
            "description" : "description",
            "extended_attributes" : "extendedAttributes",
            "is_default_group" : "isDefaultGroup",
            "name" : "name",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            description = dictionary.get("description")
            extended_attributes = None
            if dictionary.get("extendedAttributes") != None:
                extended_attributes = list()
                for structure in dictionary.get("extendedAttributes"):
                    extended_attributes.append(KvPair.from_dictionary(structure))
            is_default_group = dictionary.get("isDefaultGroup")
            name = dictionary.get("name")
            # Return an object of this model
            return cls(description,
                       extended_attributes,
                       is_default_group,
                       name)
