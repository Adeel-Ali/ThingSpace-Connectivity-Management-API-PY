# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.change_device_id_request
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .device_id import DeviceId
from .base_model import BaseModel

class ChangeDeviceIdRequest(BaseModel):

    """Implementation of the 'ChangeDeviceIdRequest' model.

    TODO: type model description here.

    Attributes:
        assign_non_geo_mdn (bool): TODO: type description here.
        change_4_g_option (string): TODO: type description here.
        device_ids (list of DeviceId): TODO: type description here.
        device_ids_to (list of DeviceId): TODO: type description here.
        npa_nxx (string): TODO: type description here.
        service_plan (string): TODO: type description here.
        zip_code (string): TODO: type description here.

    """

    def __init__(self, 
                 assign_non_geo_mdn = None,
                 change_4_g_option = None,
                 device_ids = None,
                 device_ids_to = None,
                 npa_nxx = None,
                 service_plan = None,
                 zip_code = None):
        """Constructor for the ChangeDeviceIdRequest class"""
        
        # Initialize members of the class
        self.assign_non_geo_mdn = assign_non_geo_mdn
        self.change_4_g_option = change_4_g_option
        self.device_ids = device_ids
        self.device_ids_to = device_ids_to
        self.npa_nxx = npa_nxx
        self.service_plan = service_plan
        self.zip_code = zip_code

        # Create a mapping from Model property names to API property names
        self.names = {
            "assign_non_geo_mdn" : "assignNonGeoMdn",
            "change_4_g_option" : "change4gOption",
            "device_ids" : "deviceIds",
            "device_ids_to" : "deviceIdsTo",
            "npa_nxx" : "npaNxx",
            "service_plan" : "servicePlan",
            "zip_code" : "zipCode",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            assign_non_geo_mdn = dictionary.get("assignNonGeoMdn")
            change_4_g_option = dictionary.get("change4gOption")
            device_ids = None
            if dictionary.get("deviceIds") != None:
                device_ids = list()
                for structure in dictionary.get("deviceIds"):
                    device_ids.append(DeviceId.from_dictionary(structure))
            device_ids_to = None
            if dictionary.get("deviceIdsTo") != None:
                device_ids_to = list()
                for structure in dictionary.get("deviceIdsTo"):
                    device_ids_to.append(DeviceId.from_dictionary(structure))
            npa_nxx = dictionary.get("npaNxx")
            service_plan = dictionary.get("servicePlan")
            zip_code = dictionary.get("zipCode")
            # Return an object of this model
            return cls(assign_non_geo_mdn,
                       change_4_g_option,
                       device_ids,
                       device_ids_to,
                       npa_nxx,
                       service_plan,
                       zip_code)
