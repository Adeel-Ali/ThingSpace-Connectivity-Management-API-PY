# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.add_devices_request
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .kv_pair import KvPair
from .device_list import DeviceList
from .base_model import BaseModel

class AddDevicesRequest(BaseModel):

    """Implementation of the 'AddDevicesRequest' model.

    TODO: type model description here.

    Attributes:
        account_name (string): TODO: type description here.
        custom_fields (list of KvPair): TODO: type description here.
        devices_to_add (list of DeviceList): TODO: type description here.
        group_name (string): TODO: type description here.
        sku_number (string): TODO: type description here.
        state (string): TODO: type description here.

    """

    def __init__(self, 
                 account_name = None,
                 custom_fields = None,
                 devices_to_add = None,
                 group_name = None,
                 sku_number = None,
                 state = None):
        """Constructor for the AddDevicesRequest class"""
        
        # Initialize members of the class
        self.account_name = account_name
        self.custom_fields = custom_fields
        self.devices_to_add = devices_to_add
        self.group_name = group_name
        self.sku_number = sku_number
        self.state = state

        # Create a mapping from Model property names to API property names
        self.names = {
            "account_name" : "accountName",
            "custom_fields" : "customFields",
            "devices_to_add" : "devicesToAdd",
            "group_name" : "groupName",
            "sku_number" : "skuNumber",
            "state" : "state",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            account_name = dictionary.get("accountName")
            custom_fields = None
            if dictionary.get("customFields") != None:
                custom_fields = list()
                for structure in dictionary.get("customFields"):
                    custom_fields.append(KvPair.from_dictionary(structure))
            devices_to_add = None
            if dictionary.get("devicesToAdd") != None:
                devices_to_add = list()
                for structure in dictionary.get("devicesToAdd"):
                    devices_to_add.append(DeviceList.from_dictionary(structure))
            group_name = dictionary.get("groupName")
            sku_number = dictionary.get("skuNumber")
            state = dictionary.get("state")
            # Return an object of this model
            return cls(account_name,
                       custom_fields,
                       devices_to_add,
                       group_name,
                       sku_number,
                       state)
