# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.group_update_request
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .device_id import DeviceId
from .base_model import BaseModel

class GroupUpdateRequest(BaseModel):

    """Implementation of the 'GroupUpdateRequest' model.

    TODO: type model description here.

    Attributes:
        devices_to_add (list of DeviceId): TODO: type description here.
        devices_to_remove (list of DeviceId): TODO: type description here.
        new_group_description (string): TODO: type description here.
        new_group_name (string): TODO: type description here.

    """

    def __init__(self, 
                 devices_to_add = None,
                 devices_to_remove = None,
                 new_group_description = None,
                 new_group_name = None):
        """Constructor for the GroupUpdateRequest class"""
        
        # Initialize members of the class
        self.devices_to_add = devices_to_add
        self.devices_to_remove = devices_to_remove
        self.new_group_description = new_group_description
        self.new_group_name = new_group_name

        # Create a mapping from Model property names to API property names
        self.names = {
            "devices_to_add" : "devicesToAdd",
            "devices_to_remove" : "devicesToRemove",
            "new_group_description" : "newGroupDescription",
            "new_group_name" : "newGroupName",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            devices_to_add = None
            if dictionary.get("devicesToAdd") != None:
                devices_to_add = list()
                for structure in dictionary.get("devicesToAdd"):
                    devices_to_add.append(DeviceId.from_dictionary(structure))
            devices_to_remove = None
            if dictionary.get("devicesToRemove") != None:
                devices_to_remove = list()
                for structure in dictionary.get("devicesToRemove"):
                    devices_to_remove.append(DeviceId.from_dictionary(structure))
            new_group_description = dictionary.get("newGroupDescription")
            new_group_name = dictionary.get("newGroupName")
            # Return an object of this model
            return cls(devices_to_add,
                       devices_to_remove,
                       new_group_description,
                       new_group_name)
