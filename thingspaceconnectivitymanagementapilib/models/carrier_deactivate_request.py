# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.carrier_deactivate_request
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .kv_pair import KvPair
from .device_list import DeviceList
from .base_model import BaseModel

class CarrierDeactivateRequest(BaseModel):

    """Implementation of the 'CarrierDeactivateRequest' model.

    TODO: type model description here.

    Attributes:
        account_name (string): TODO: type description here.
        custom_fields (list of KvPair): TODO: type description here.
        devices (list of DeviceList): TODO: type description here.
        etf_waiver (bool): TODO: type description here.
        group_name (string): TODO: type description here.
        reason_code (string): TODO: type description here.
        service_plan (string): TODO: type description here.

    """

    def __init__(self, 
                 account_name = None,
                 custom_fields = None,
                 devices = None,
                 etf_waiver = None,
                 group_name = None,
                 reason_code = None,
                 service_plan = None):
        """Constructor for the CarrierDeactivateRequest class"""
        
        # Initialize members of the class
        self.account_name = account_name
        self.custom_fields = custom_fields
        self.devices = devices
        self.etf_waiver = etf_waiver
        self.group_name = group_name
        self.reason_code = reason_code
        self.service_plan = service_plan

        # Create a mapping from Model property names to API property names
        self.names = {
            "account_name" : "accountName",
            "custom_fields" : "customFields",
            "devices" : "devices",
            "etf_waiver" : "etfWaiver",
            "group_name" : "groupName",
            "reason_code" : "reasonCode",
            "service_plan" : "servicePlan",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            account_name = dictionary.get("accountName")
            custom_fields = None
            if dictionary.get("customFields") != None:
                custom_fields = list()
                for structure in dictionary.get("customFields"):
                    custom_fields.append(KvPair.from_dictionary(structure))
            devices = None
            if dictionary.get("devices") != None:
                devices = list()
                for structure in dictionary.get("devices"):
                    devices.append(DeviceList.from_dictionary(structure))
            etf_waiver = dictionary.get("etfWaiver")
            group_name = dictionary.get("groupName")
            reason_code = dictionary.get("reasonCode")
            service_plan = dictionary.get("servicePlan")
            # Return an object of this model
            return cls(account_name,
                       custom_fields,
                       devices,
                       etf_waiver,
                       group_name,
                       reason_code,
                       service_plan)
