# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.device_aggregate_usage_list_request
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .device_id import DeviceId
from .base_model import BaseModel

class DeviceAggregateUsageListRequest(BaseModel):

    """Implementation of the 'DeviceAggregateUsageListRequest' model.

    TODO: type model description here.

    Attributes:
        account_name (string): TODO: type description here.
        device_ids (list of DeviceId): TODO: type description here.
        end_time (string): TODO: type description here.
        group_name (string): TODO: type description here.
        start_time (string): TODO: type description here.

    """

    def __init__(self, 
                 account_name = None,
                 device_ids = None,
                 end_time = None,
                 group_name = None,
                 start_time = None):
        """Constructor for the DeviceAggregateUsageListRequest class"""
        
        # Initialize members of the class
        self.account_name = account_name
        self.device_ids = device_ids
        self.end_time = end_time
        self.group_name = group_name
        self.start_time = start_time

        # Create a mapping from Model property names to API property names
        self.names = {
            "account_name" : "accountName",
            "device_ids" : "deviceIds",
            "end_time" : "endTime",
            "group_name" : "groupName",
            "start_time" : "startTime",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            account_name = dictionary.get("accountName")
            device_ids = None
            if dictionary.get("deviceIds") != None:
                device_ids = list()
                for structure in dictionary.get("deviceIds"):
                    device_ids.append(DeviceId.from_dictionary(structure))
            end_time = dictionary.get("endTime")
            group_name = dictionary.get("groupName")
            start_time = dictionary.get("startTime")
            # Return an object of this model
            return cls(account_name,
                       device_ids,
                       end_time,
                       group_name,
                       start_time)
