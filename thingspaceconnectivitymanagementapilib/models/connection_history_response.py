# -*- coding: utf-8 -*-

"""
    thingspaceconnectivitymanagementapilib.models.connection_history_response
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
"""
from .connection_event import ConnectionEvent
from .base_model import BaseModel

class ConnectionHistoryResponse(BaseModel):

    """Implementation of the 'ConnectionHistoryResponse' model.

    TODO: type model description here.

    Attributes:
        connection_history (list of ConnectionEvent): TODO: type description
            here.
        has_more_data (bool): TODO: type description here.

    """

    def __init__(self, 
                 connection_history = None,
                 has_more_data = None):
        """Constructor for the ConnectionHistoryResponse class"""
        
        # Initialize members of the class
        self.connection_history = connection_history
        self.has_more_data = has_more_data

        # Create a mapping from Model property names to API property names
        self.names = {
            "connection_history" : "connectionHistory",
            "has_more_data" : "hasMoreData",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            connection_history = None
            if dictionary.get("connectionHistory") != None:
                connection_history = list()
                for structure in dictionary.get("connectionHistory"):
                    connection_history.append(ConnectionEvent.from_dictionary(structure))
            has_more_data = dictionary.get("hasMoreData")
            # Return an object of this model
            return cls(connection_history,
                       has_more_data)
